
## \<html\> [HTML/CSS 문제 풀이]

### 1\. [개념] 다중 선택자의 종류를 예제를 통해서 기술하세요.

다중 선택자는 CSS에서 여러 요소를 한 번에 선택하기 위해 사용되며, 크게 3가지 방식이 있습니다.

1.  **그룹 선택자 (,)**: 쉼표(`,`)를 사용하여 여러 개의 다른 선택자를 나열합니다. 'A **또는** B'를 의미하며, 나열된 모든 요소에 동일한 스타일을 적용합니다.

      * **예제**: `h1, h3, p { color: blue; }`
      * **의미**: `<h1>` 태그 **또는** `<h3>` 태그 **또는** `<p>` 태그를 모두 선택하여 글자색을 파란색으로 변경합니다.

2.  **자손/후손 선택자 ( )**: 공백(' ')을 사용하여 특정 요소의 내부에 있는 모든 하위 요소를 선택합니다. 'A **안에 있는** B'를 의미합니다.

      * **예제**: `div p { font-size: 14px; }`
      * **의미**: `<div>` 태그 **내부에 있는** 모든 `<p>` 태그(자식이든, 손자든 상관없이)를 선택합니다.

3.  **체인(연결) 선택자 (.)**: 선택자를 공백 없이 연달아 붙여서 여러 조건을 *동시에* 만족하는 요소를 선택합니다. 'A **이면서** B인 요소'를 의미합니다.

      * **예제**: `p.intro { font-weight: bold; }`
      * **의미**: `<p>` 태그**이면서** 동시에 `intro` 클래스를 가진 요소를 선택합니다.

### 2\. [실습] ID가 wrapper인 요소 안에 있는 모든 h2 태그에 color: orange;를 적용하세요.

  * **정답 (CSS)**:
    ```css
    #wrapper h2 {
      color: orange;
    }
    ```
  * **설명**: 자손 선택자(공백)를 사용하여 ID가 `wrapper`인 요소(`#wrapper`)의 모든 하위 `<h2>` 태그를 선택합니다.

### 3\. [실습] 여러개의 태그에 하나의 속성과 속성값을 선언할려고 한다. ex) h1 h3 p에 동일한 배경색상과 글자 색상을 설정하여 처리하세요.

  * **정답 (CSS)**:
    ```css
    h1, h3, p {
      background-color: navy;
      color: white;
    }
    ```
  * **설명**: 그룹 선택자(`,`)를 사용하여 `h1`, `h3`, `p` 태그를 모두 묶어 동일한 `background-color`와 `color` 속성을 적용합니다.

### 4\. [실습] 하나의 태그에 여러 개의 클래스 속성을 선언할려고 한다. 기본예제를 만들어 설명하세요

하나의 태그에 여러 클래스를 적용하려면 `class` 속성값 안에 공백으로 클래스 이름을 구분하여 나열합니다.

  * **정답 (HTML 및 CSS 예제)**:

    **HTML**:

    ```html
    <div class="box warning">
      이것은 경고 박스입니다.
    </div>

    <div class="box">
      이것은 일반 박스입니다.
    </div>
    ```

    **CSS**:

    ```css
    /* 공통 박스 스타일 */
    .box {
      border: 1px solid #ccc;
      padding: 10px;
      margin-bottom: 10px;
    }

    /* 경고 스타일 (배경색과 굵은 글씨) */
    .warning {
      background-color: #fffbe6;
      font-weight: bold;
    }
    ```

  * **설명**: 첫 번째 `<div>`는 `box` 클래스와 `warning` 클래스를 모두 가지고 있으므로, 두 클래스에 정의된 스타일(테두리, 패딩, 여백, 배경색, 굵은 글씨)이 모두 병합되어 적용됩니다.

### 5\. [개념] 인접형제(+), 일반형제(\~)의 차이점을 기본예제로 기술하세요.

두 선택자 모두 같은 부모를 가진 형제 요소 중에서 뒤에 오는 요소를 선택하지만, 선택 범위에 차이가 있습니다.

  * **인접 형제 선택자 (`+`)**: 'A **바로 다음에 오는** 형제 B' (단 하나만 선택)
  * **일반 형제 선택자 (`~`)**: 'A **뒤에 오는** 모든 형제 B' (여러 개 선택 가능)

**예제 (HTML 및 CSS)**:

**HTML**:

```html
<div>
  <h2>제목</h2>
  <p>이것은 인접 형제입니다. (h2 + p)</p>
  <div>다른 태그</div>
  <p>이것은 일반 형제입니다. (h2 ~ p)</p>
  <p>이것도 일반 형제입니다. (h2 ~ p)</p>
</div>
```

**CSS**:

```css
/* h2 바로 다음에 오는 p 태그만 글자색을 red로 변경 */
h2 + p {
  color: red;
}

/* h2 뒤에 오는 모든 p 태그의 배경색을 yellow로 변경 */
h2 ~ p {
  background-color: yellow;
}
```

  * **결과**:
      * `"이것은 인접 형제입니다."` 문단: 글자색이 `red`가 되고 배경색이 `yellow`가 됩니다. (`+`와 `~` 조건 모두 만족)
      * `"이것은 일반 형제입니다."` 문단: 배경색만 `yellow`가 됩니다. (`+` 조건 불만족)
      * `"이것도 일반 형제입니다."` 문단: 배경색만 `yellow`가 됩니다. (`+` 조건 불만족)

### 6\. [실습] 클래스가 text인 p 태그 바로 다음에 오는 인접한 형제 요소에 margin-top: 30px;를 적용하세요.

  * **정답 (CSS)**:
    ```css
    p.text + * {
      margin-top: 30px;
    }
    ```
  * **설명**: `<p>` 태그이면서 `text` 클래스를 가진 요소(`p.text`)를 찾고, 인접 형제 선택자(`+`)를 사용하여 그 *바로 뒤에 오는* *모든 종류의 형제 요소*(`*`)를 선택해 `margin-top`을 적용합니다.

### 7\. [실습] ID가 main-content인 h2 태그 뒤에 나오는 모든 형제 p 태그에 border: 1px dashed black; 스타일을 적용하세요.

  * **정답 (CSS)**:
    ```css
    h2#main-content ~ p {
      border: 1px dashed black;
    }
    ```
  * **설명**: `<h2>` 태그이면서 ID가 `main-content`인 요소(`h2#main-content`)를 찾고, 일반 형제 선택자(`~`)를 사용하여 그 뒤에 오는 *모든* 형제 `<p>` 태그를 선택해 테두리를 적용합니다.

### 8\. [개념] css의 속성 선택자의 종류를 기술하고, 그 차이점으로 나열하세요.

속성 선택자는 HTML 태그가 가진 속성(attribute)이나 속성값을 기준으로 요소를 선택합니다.

| 선택자 | 예제 | 설명 |
| :--- | :--- | :--- |
| **[attr]** | `a[href]` | `href` 속성을 **가지고 있는** 모든 `<a>` 태그 |
| **[attr=value]** | `input[type="text"]` | `type` 속성값이 정확히 `"text"`인 `input` 태그 |
| **[attr\~=value]** | `img[class~="icon"]` | `class` 속성값에 공백으로 구분된 단어 중 `"icon"`이 **포함된** `<img>` 태그 (예: `class="main icon"`) |
| **[attr^=value]** | `a[href^="https://"]` | `href` 속성값이 `"https://"`로 **시작하는** `<a>` 태그 (외부 링크) |
| \**[attr$=value]** | `img[src$=".png"]`|`src`속성값이`".png"` 로 **끝나는**  `\<img\>`태그 (PNG 파일) | | **[attr*=value]** |`a[href*="google"]`|`href`속성값에`"google"`문자열이 **포함된**`\<a\>`태그 (예:`https://www.google.com/search?q=...google.com...` ) | | **[attr\|=value]** |  `p[lang|="en"]`|`lang`속성값이 정확히`"en"` 이거나  `"en-"` 으로 **시작하는**  `\<p\>`태그 (예:`lang="en"`또는`lang="en-US"\`) |

### 9\. [실습] table에서 border 속성이 있을 때, border가 2일때 속성값 설정했을 css 배경색상과 글자 색상을 다르게 설정해보세요.

  * **정답 (CSS)**:
    ```css
    /* 1. border 속성을 가지고 있는 모든 table */
    table[border] {
      background-color: lightgray;
      color: black;
    }

    /* 2. border 속성값이 정확히 "2"인 table (1번 스타일을 덮어씀) */
    table[border="2"] {
      background-color: navy;
      color: white;
    }
    ```
  * **설명**: `[border]` 선택자로 `border` 속성이 있는 모든 테이블에 기본 스타일을 적용하고, 더 구체적인 `[border="2"]` 선택자로 `border` 값이 2인 테이블에만 다른 스타일을 덮어씌웁니다.

-----

## \<database\> [Oracle SQL 문제 풀이]

### 1\. [개념] 다중행과 다중열 SUBQUERY의 종류를 오늘 배운 예제를 통해서 설명하세요.

서브쿼리(Subquery)는 메인 쿼리 내부에 포함된 또 다른 `SELECT` 문이며, 반환하는 결과의 형태에 따라 나뉩니다.

1.  **다중 행 서브쿼리 (Multi-row Subquery)**:

      * **설명**: 서브쿼리가 \*\*여러 개의 행(row)\*\*을 반환합니다. 메인 쿼리에서는 이 여러 개의 값(목록)과 비교해야 하므로 `=`, `>` 같은 단일 비교 연산자를 쓸 수 없고, `IN`, `ANY`, `ALL` 같은 다중 행 연산자를 사용해야 합니다.
      * **예제**: 'SALES' 또는 'RESEARCH' 부서(여러 개)에 속한 사원 찾기
        ```sql
        SELECT * FROM EMP
        WHERE DEPTNO IN (
            -- 이 서브쿼리는 20, 30 등 여러 행을 반환함
            SELECT DEPTNO 
            FROM DEPT 
            WHERE DNAME IN ('SALES', 'RESEARCH')
        );
        ```

2.  **다중 열 서브쿼리 (Multi-column Subquery)**:

      * **설명**: 서브쿼리가 \*\*여러 개의 열(column)\*\*을 반환합니다. 메인 쿼리의 `WHERE` 절에서도 이 여러 개의 열을 괄호로 묶어 *한 번에* 비교합니다. (Pairwise Comparison)
      * **예제**: 'SMITH'와 직무(JOB)와 부서(DEPTNO)가 모두 같은 사원 찾기
        ```sql
        SELECT *
        FROM EMP
        WHERE (JOB, DEPTNO) = ( -- 메인 쿼리도 (열1, 열2)로 비교
            -- 이 서브쿼리는 'CLERK', 20 이라는 다중 열을 반환함
            SELECT JOB, DEPTNO 
            FROM EMP 
            WHERE ENAME = 'SMITH'
        )
        AND ENAME != 'SMITH';
        ```
      * **다중 행 + 다중 열 응용 예제**: 부서별 최고 급여를 받는 사원 찾기
        ```sql
        SELECT ENAME, DEPTNO, SAL
        FROM EMP
        WHERE (DEPTNO, SAL) IN ( -- (열1, 열2)를 여러 행의 목록과 비교
            -- (10, 5000), (20, 3000), (30, 2850) 등 여러 행/열 반환
            SELECT DEPTNO, MAX(SAL)
            FROM EMP
            GROUP BY DEPTNO
        );
        ```

### 2\. [실습] BLAKE의 부서번호(DEPNO)와 같은 사원을 출력하세요

  * **정답 (SQL)**:
    ```sql
    SELECT *
    FROM EMP
    WHERE DEPTNO = (
        SELECT DEPTNO 
        FROM EMP 
        WHERE ENAME = 'BLAKE'
    );
    ```
  * **설명**: `ENAME = 'BLAKE'`인 사원의 `DEPTNO`(30)를 찾는 단일 행 서브쿼리를 실행하고, 메인 쿼리에서 해당 `DEPTNO`와 일치하는 모든 사원을 조회합니다.

### 3\. [실습] ALLEN의 직책(JOB)과 입사월(TO\_CHAR(HIREDATE,'MM')이 같은 사원을 출력하세요.

  * **정답 (SQL)**:
    ```sql
    SELECT *
    FROM EMP
    WHERE (JOB, TO_CHAR(HIREDATE, 'MM')) = (
        SELECT JOB, TO_CHAR(HIREDATE, 'MM') 
        FROM EMP 
        WHERE ENAME = 'ALLEN'
    )
    AND ENAME != 'ALLEN'; -- ALLEN 본인 제외
    ```
  * **설명**: 다중 열 서브쿼리를 사용하여 'ALLEN'의 `JOB`('SALESMAN')과 입사월(`'02'`)을 동시에 조회하고, 이 두 조건이 모두 일치하는 다른 사원들을 조회합니다.

### 4\. [실습] 30번 부서(DEPTNO = 30) 직원들 중, 'MANAGER' 직무를 가진 사람과 동일한 상사(mgr)와 동일한 입사일(hiredate)을 가진 직원을 조회하세요.

  * **정답 (SQL)**:
    ```sql
    SELECT *
    FROM EMP
    WHERE (MGR, HIREDATE) IN (
        SELECT MGR, HIREDATE 
        FROM EMP 
        WHERE DEPTNO = 30 AND JOB = 'MANAGER'
    );
    ```
  * **설명**: 30번 부서의 'MANAGER' (BLAKE)의 `(MGR, HIREDATE)` 콤비(7839, 01-MAY-81)를 다중 열 서브쿼리로 조회합니다. 메인 쿼리에서는 이 콤비와 일치하는 모든 사원을 찾습니다. (만약 30번 부서 매니저가 여러 명일 경우를 대비해 `=` 대신 `IN`을 사용합니다.)

### 5\. [개념] oracle에서 사용하는 rownum은 언제 사용하는 것이고, 이것이 numbering되는 시점 기준을 정리하세요.

  * **용도**: `ROWNUM`은 오라클에서 쿼리 결과로 반환되는 행의 순서(번호)를 나타내는 \*\*가상 열(Pseudocolumn)\*\*입니다. 주로 조회된 결과의 개수를 제한(예: `WHERE ROWNUM <= 3`)하여 **Top-N 쿼리** (상위 N개 행 조회)에 사용됩니다.

  * **번호 부여 시점 (매우 중요)**:

    1.  `FROM` 절과 `WHERE` 절이 먼저 실행되어 대상 데이터를 선정합니다.
    2.  이 선정된 결과 집합의 각 행에 대해 `ROWNUM`이 1, 2, 3... 순서로 **부여됩니다.**
    3.  `GROUP BY`, `HAVING` 절이 실행됩니다.
    4.  **`ORDER BY` 절이 가장 마지막에 실행됩니다.**

  * **시점 기준의 의미**: `ROWNUM`은 `ORDER BY` (정렬)보다 *먼저* 부여됩니다. 따라서 단순히 `ORDER BY SAL DESC`와 `WHERE ROWNUM <= 3`을 함께 쓰면, *정렬되기 전*의 데이터에 번호가 붙어버려 원하는 '급여 상위 3명'이 나오지 않습니다. (이 문제를 해결하기 위해 **인라인 뷰**를 사용합니다.)

### 6\. [개념] inline view란 무엇을 말하는지 기본 예제를 통해서 설명하되 관련된 개념과 함께 설명하세요.

  * **정의**: \*\*인라인 뷰 (Inline View)\*\*는 `FROM` 절에 직접 작성된 서브쿼리를 말합니다.

  * **개념**: 이 서브쿼리의 결과는 마치 실제 테이블처럼 취급되며, 쿼리가 실행되는 동안에만 존재하는 **가상의 임시 테이블** 역할을 합니다. 학습 내용의 "프인 가별필" (FROM절의, Inline View는, 가상 테이블이라, 별칭(Alias)이 필수)이라는 요약처럼, 인라인 뷰는 반드시 별칭(Alias)을 가져야 합니다.

  * **사용 이유**: `ROWNUM`의 한계(정렬보다 먼저 실행됨)를 극복하기 위해 사용됩니다. 인라인 뷰 안에서 먼저 데이터를 정렬( `ORDER BY` ) 시킨 후, 바깥쪽 메인 쿼리에서 정렬된 결과에 `ROWNUM`을 적용하여 올바른 Top-N 결과를 얻을 수 있습니다.

  * **기본 예제 (급여 상위 3명 조회)**:

    ```sql
    SELECT ROWNUM, ENAME, SAL
    FROM (
        -- 1. 인라인 뷰: 먼저 급여(SAL) 순으로 정렬된
        --    가상의 테이블(별칭 E_SORTED)을 만듭니다.
        SELECT ENAME, SAL 
        FROM EMP 
        ORDER BY SAL DESC
    ) E_SORTED -- 인라인 뷰의 별칭 (필수)
    WHERE ROWNUM <= 3; -- 2. 정렬된 결과에 ROWNUM을 적용해 상위 3명 추출
    ```

### 7\. [실습] 가장 최근에 입사한 사원(내림차순)으로 으로 출력하되, top 3명의 사원(순서, 입사일, 사원명) 을 출력하세요.

  * **정답 (SQL)**:
    ```sql
    SELECT 
        ROWNUM AS "순서", 
        HIREDATE, 
        ENAME
    FROM (
        -- 1. 인라인 뷰: 입사일(HIREDATE)을 내림차순(DESC)으로 먼저 정렬
        SELECT HIREDATE, ENAME 
        FROM EMP 
        ORDER BY HIREDATE DESC
    )
    WHERE ROWNUM <= 3; -- 2. 정렬된 결과에서 ROWNUM을 사용해 상위 3명(최근 입사자) 추출
    ```
  * **설명**: 인라인 뷰를 사용하여 `EMP` 테이블을 `HIREDATE` 기준 내림차순(최신순)으로 먼저 정렬합니다. 바깥쪽 메인 쿼리에서 이 정렬된 결과에 `ROWNUM`을 적용하여 `ROWNUM`이 3 이하인, 즉 가장 최근에 입사한 3명의 사원을 조회합니다.